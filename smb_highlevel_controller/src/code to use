MOVE TO THE BATTERIES:
        
        while (x < -0.158928)
        {
            cmd_val_values_.linear.x = 0.25;
            cmd_vel_publisher_.publish(cmd_val_values_);
            ROS_INFO("x [%f]", x);
            ROS_INFO("Moving Forward");
            loop_rate.sleep();
        }
        ROS_INFO("x [%f]", x);

        ROS_INFO("Stopping Robot");
        cmd_val_values_.linear.x = 0.0;
        cmd_vel_publisher_.publish(cmd_val_values_);
        ROS_INFO("Done");

        ROS_INFO("Rotating the robot");
        rotating = false;
        ros::Rate r(1);
        float error;
        while (!rotating)
        {
            error = 1.571 - yaw;
            if (error > 0.5)
            {
                cmd_val_values_.angular.z = 0.5;
            }
            else
            {
                cmd_val_values_.angular.z = 0.25;
            }
            cmd_vel_publisher_.publish(cmd_val_values_);

            ROS_INFO("Yaw [%f]", yaw);
            if (error < abs(0.1))
            {
                ROS_INFO("Stopping Robot");
                cmd_val_values_.linear.x = 0.0;
                cmd_val_values_.angular.z = 0.0;
                cmd_vel_publisher_.publish(cmd_val_values_);
                rotating = true;
            }
            r.sleep();
        }
        ROS_INFO("Done");
        
        
        
        
        
        
        
MOVE ARM:
        ros::Rate loop_rate(10);
        loop_rate.sleep();
        ros::Duration(2.35).sleep();
        ROS_INFO("Start");

        trajectory_msgs::JointTrajectory traj;
        trajectory_msgs::JointTrajectoryPoint points_n;

        traj.header.frame_id = "base_link";
        traj.joint_names.resize(4);
        traj.points.resize(1);
        traj.points[0].positions.resize(4);

        traj.joint_names[0] ="joint1";
        traj.joint_names[1] ="joint2";
        traj.joint_names[2] ="joint3";
        traj.joint_names[3] ="joint4";

        traj.header.stamp = ros::Time::now();
        traj.points[0].positions[0] = 0.3;
        traj.points[0].positions[1] = 0.3;
        traj.points[0].positions[2] = 0.3;
        traj.points[0].positions[3] = 0.3;
        traj.points[0].time_from_start = ros::Duration(1);

        arm_pub.publish(traj);
        ros::spinOnce();


        ROS_INFO("Finish");
        
        
        
        float arm_pose[4] = {-0.9, 0.6, -0.9, -0.6};
        Controller::controllArm(arm_pose);
        
        
        
        
        
        
        
        
OPEN/CLOSE GRIPPER
        trajectory_msgs::JointTrajectory traj;
        trajectory_msgs::JointTrajectoryPoint points_n;

        traj.header.frame_id = "base_link";
        traj.joint_names.resize(1);
        traj.points.resize(1);
        traj.points[0].positions.resize(1);

        traj.joint_names[0] ="gripper";

        traj.header.stamp = ros::Time::now();
        traj.points[0].positions[0] = 1;
        traj.points[0].time_from_start = ros::Duration(1);

        gripper_pub.publish(traj);


        ROS_INFO("Finish");
        
        
TURN:
    void Controller::turn(int direction)
    { // direction = 1 --> left 90* ....direction = 2 --> right 90*		--> DOESNT WORK YET
        geometry_msgs::Twist cmd_val_values;

        cmd_val_values.linear.x = 0.0;
        if (direction == 1)
        {
            ROS_INFO("Turning left");
            cmd_val_values.angular.z = 1.0;
        }
        else if (direction == 2)
        {
            ROS_INFO("Turning right");
            cmd_val_values.angular.z = -1.0;
        }
        cmd_vel_publisher_.publish(cmd_val_values);
        ros::Duration(0.35).sleep();
        cmd_val_values.angular.z = 0.0;
        cmd_vel_publisher_.publish(cmd_val_values);
    }